@import io.micronaut.starter.application.Project
@import io.micronaut.starter.application.ApplicationType;
@import io.micronaut.starter.options.BuildTool;
@import io.micronaut.starter.feature.Features;
@args (Features features, Project project, BuildTool buildTool, ApplicationType applicationType, String codeModule, String artifactPath, String functionId, String apiId, String version, String handler, boolean nativeImage, boolean optimized)

package @project.getPackageName();

import io.micronaut.aws.cdk.function.MicronautFunction;
import io.micronaut.aws.cdk.function.MicronautFunctionFile;
import io.micronaut.starter.application.ApplicationType;
import io.micronaut.starter.options.BuildTool;
import software.amazon.awscdk.CfnOutput;
import software.amazon.awscdk.Duration;
import software.amazon.awscdk.Stack;
import software.amazon.awscdk.StackProps;
@if (features.contains("dynamodb")) {
import software.amazon.awscdk.services.dynamodb.Attribute;
import software.amazon.awscdk.services.dynamodb.AttributeType;
import software.amazon.awscdk.services.dynamodb.Table;
}
@if (features.contains("amazon-api-gateway")) {
import software.amazon.awscdk.services.apigateway.LambdaRestApi;
}
@if (features.contains("aws-lambda-function-url")) {
import software.amazon.awscdk.services.lambda.FunctionUrl;
import software.amazon.awscdk.services.lambda.FunctionUrlAuthType;
import software.amazon.awscdk.services.lambda.FunctionUrlOptions;
}
import software.amazon.awscdk.services.lambda.Code;
import software.amazon.awscdk.services.lambda.Function;
import software.amazon.awscdk.services.lambda.Tracing;
import software.constructs.Construct;
import java.util.HashMap;
import java.util.Map;

public class AppStack extends Stack {

    public AppStack(final Construct parent, final String id) {
        this(parent, id, null);
    }

    public AppStack(final Construct parent, final String id, final StackProps props) {
        super(parent, id, props);

        Map<String, String> environmentVariables = new HashMap<>();
@if (features.contains("dynamodb")) {
        Table table = Table.Builder.create(this, "micronautapptable")
                .partitionKey(Attribute.builder()
                        .name("pk")
                        .type(AttributeType.STRING)
                        .build())
                .sortKey(Attribute.builder()
                        .name("sk")
                        .type(AttributeType.STRING)
                        .build())
                .build();

        environmentVariables.put("DYNAMODB_TABLE_NAME", table.getTableName());
}
@if (functionId != null) {
@if (applicationType == ApplicationType.DEFAULT) {
        Function function = MicronautFunction.create(ApplicationType.DEFAULT,
}
@if (applicationType == ApplicationType.FUNCTION) {
        Function function = MicronautFunction.create(ApplicationType.FUNCTION,
}
                @nativeImage,
                this,
                "@(functionId)")
@if (applicationType == ApplicationType.FUNCTION) {
                .handler("@(handler)")
}
                .environment(environmentVariables)
                .code(Code.fromAsset(functionPath()))
                .timeout(Duration.seconds(10))
                .memorySize(512)
                .tracing(Tracing.ACTIVE)
                .build();
}
@if (features.contains("dynamodb")) {
        table.grantReadWriteData(function);
}
@if (functionId != null && apiId != null) {
@if (features.contains("aws-lambda-function-url")) {
        FunctionUrl functionUrl = function.addFunctionUrl(FunctionUrlOptions.builder()
                .authType(FunctionUrlAuthType.NONE)
                .build());
}
@if (features.contains("amazon-api-gateway")) {
        LambdaRestApi api = LambdaRestApi.Builder.create(this, "@(apiId)")
                .handler(function)
                .build();
}
        CfnOutput.Builder.create(this, "ApiUrl")
                .exportName("ApiUrl")
@if (features.contains("amazon-api-gateway")) {
                .value(api.getUrl())
}
@if (features.contains("aws-lambda-function-url")) {
                .value(functionUrl.getUrl())
}
                .build();
}
    }

    public static String functionPath() {
        return "../@(codeModule)/@(artifactPath)/" + functionFilename();
    }

    public static String functionFilename() {
        return MicronautFunctionFile.builder()
@if (optimized) {
            .optimized()
}
            .graalVMNative(@nativeImage)
            .version("@(version)")
@if (buildTool.isGradle()) {
            .archiveBaseName("@(codeModule)")
} else {
            .archiveBaseName("@(project.getName())")
}
@if (buildTool.isGradle()) {
            .buildTool(BuildTool.GRADLE)
} else {
            .buildTool(BuildTool.MAVEN)
}
            .build();
    }
}