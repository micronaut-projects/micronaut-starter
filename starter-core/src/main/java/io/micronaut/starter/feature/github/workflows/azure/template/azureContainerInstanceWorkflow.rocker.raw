@import io.micronaut.starter.application.Project
@import io.micronaut.starter.options.BuildTool
@import io.micronaut.starter.options.JdkVersion
@import io.micronaut.starter.feature.github.workflows.templates.graalvmSetup
@import io.micronaut.starter.feature.github.workflows.templates.javaSetup
@import io.micronaut.starter.feature.github.workflows.templates.buildAndPushImage
@import static io.micronaut.starter.feature.github.workflows.azure.AbstractAzureContainerInstanceWorkflow.AZURE_DEFAULT_WORKFLOW_LOCATION

@args (
Project project,
BuildTool buildTool,
JdkVersion jdkVersion,
boolean isGraal,
)

@if (isGraal) {
name: Azure Container Instance GraalVM CE CD
} else {
name: Azure Container Instance Java CD
}
on: [push, pull_request]

env:
  AZURE_LOCATION: @AZURE_DEFAULT_WORKFLOW_LOCATION
  AZURE_DNS_LABEL: @project.getName()

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
@if(isGraal){
@graalvmSetup.template(buildTool, jdkVersion)
} else {
@javaSetup.template(buildTool, jdkVersion)
}
      - name: Docker login
        uses: docker/login-action@@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: 'Login via Azure CLI'
        uses: azure/login@@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Build And Push Docker Image
        env:
          DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
          DOCKER_REPOSITORY_PATH: ${{ secrets.DOCKER_REPOSITORY_PATH }}
          TESTCONTAINERS_RYUK_DISABLED: true
        run: |
          export DOCKER_IMAGE=`echo "${DOCKER_REGISTRY_URL}/${DOCKER_REPOSITORY_PATH}/@project.getName()" | sed -e 's#//#/#' -e 's#^/##'`
@buildAndPushImage.template(buildTool, isGraal)
      - name: Deploy to Azure Container Instances
        env:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          DOCKER_IMAGE_REPOSITORY=$(docker images --format "{{.Repository}}" | grep @project.getName())
          DOCKER_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" "${DOCKER_IMAGE_REPOSITORY}" )

          az container create --resource-group "${AZURE_RESOURCE_GROUP}" \
            --name @project.getName() \
            --registry-login-server "${DOCKER_REGISTRY_URL}" \
            --registry-username "${DOCKER_USERNAME}" \
            --registry-password "${DOCKER_PASSWORD}" \
            --image "${DOCKER_IMAGE}" \
            --dns-name-label "${AZURE_DNS_LABEL}" \
            --ports 8080 \
            --location "${AZURE_LOCATION}"