@import io.micronaut.starter.application.Project
@import io.micronaut.starter.feature.github.workflows.docker.AbstractDockerRegistryWorkflow
@import static io.micronaut.starter.feature.github.workflows.gcloud.AbstractCloudRunWorkflow.GCLOUD_DEFAULT_REGION
@import static io.micronaut.starter.feature.github.workflows.gcloud.AbstractCloudRunWorkflow.GCLOUD_DEFAULT_GCR

@args (
AbstractDockerRegistryWorkflow feature,
Project project,
String workflowFilePath
)


## @feature.getTitle()

Workflow file: [`@workflowFilePath`](@workflowFilePath)

### Workflow description
For pushes to the `master` branch, the workflow will:
1. Setup the build environment with respect to the selected java/graalvm version.
2. Setup of [Google Cloud CLI](https://cloud.google.com/sdk).
3. Authenticate docker to use [Google Container Registry (GCR)](https://cloud.google.com/container-registry/docs).
4. Build, tag and push Docker image with Micronaut application to GCR.
6. Deploy [Google Cloud Run](https://cloud.google.com/run) application.

### Dependencies on other GitHub Actions
- [Setup GraalVM `DeLaGuardo/setup-graalvm`](https://github.com/DeLaGuardo/setup-graalvm)
- [Setup Google Cloud CLI `google-github-actions/setup-gcloud`](https://github.com/google-github-actions/setup-gcloud)

### Setup
Add the following GitHub secrets:

| Name | Description |
| ---- | ----------- |
@for (secret : feature.getSecrets()) {
| @secret.getName() | @secret.getDescription() |
}


The workflow file also contains additional configuration options that are now configured to:

| Name | Description | Default value |
| ---- | ----------- | ------------- |
| GCLOUD_REGION | Region where the Cloud Run application will be created. See [Cloud Run Release Notes](https://cloud.google.com/run/docs/release-notes) to find out what regions are supported. | `@GCLOUD_DEFAULT_REGION` |
| GCLOUD_GCR | Google Container Registry url. See [Overview of Container Registry](https://cloud.google.com/container-registry/docs/overview) to find out valid GCR endpoints. | `@GCLOUD_DEFAULT_GCR` |

### Verification
From the workflow step `Deploy Cloud Run` copy out url `https://@(project.getName())-__________run.app` of the invoke endpoint:
```
Invoke endpoint:
https://@(project.getName())-__________run.app
```

Call the api endpoint:
```
curl https://@(project.getName())-__________run.app/@project.getPropertyName()
```

