@import io.micronaut.starter.options.TestFramework
@import io.micronaut.starter.application.Project
@import io.micronaut.starter.feature.Features
@import io.micronaut.starter.util.VersionInfo
@import io.micronaut.starter.feature.build.gradle.templates.dependency
@import io.micronaut.starter.application.ApplicationType

@args (
ApplicationType applicationType,
Project project,
Features features
)

dependencies {
@io.micronaut.starter.feature.build.gradle.templates.annotationProcessors.template(features)
@if (features.contains("graalvm")) {
    @dependency.template("org.graalvm.nativeimage", "svm", "compileOnly", null)
}
    @dependency.template("io.micronaut", "micronaut-validation", "implementation", null)
@if (features.language().isKotlin()) {
    @dependency.template("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", "implementation", "${kotlinVersion}")
    @dependency.template("org.jetbrains.kotlin", "kotlin-reflect", "implementation", "${kotlinVersion}")
    @dependency.template("io.micronaut.kotlin", "micronaut-kotlin-runtime", "implementation", null)
}
@if (features.language().isGroovy()) {
    @dependency.template("io.micronaut.groovy", "micronaut-runtime-groovy", "implementation", null)
} else {
    @dependency.template("io.micronaut", "micronaut-runtime", "implementation", null)
}
@if (features.contains("grpc")) {
    @dependency.template("io.micronaut.grpc", "micronaut-grpc-runtime", "implementation", null)
}
@if (features.contains("picocli")) {
    @dependency.template("info.picocli", "picocli", "implementation", null)
    @dependency.template("io.micronaut.picocli", "micronaut-picocli", "implementation", null)
}
@if (features.contains("annotation-api")) {
    @dependency.template("javax.annotation", "javax.annotation-api", "implementation", null)
}
@if (features.contains("oracle-cloud-sdk")) {
    @dependency.template("io.micronaut.oraclecloud", "micronaut-oraclecloud-sdk", "implementation", null)
}
@if (features.contains("aws-v2-sdk")) {
    @dependency.template("io.micronaut.aws", "micronaut-aws-sdk-v2", "implementation", null)
}
@if (features.contains("oracle-function")) {
    @if (!features.contains("oracle-function-http")) {
    @dependency.template("io.micronaut.oraclecloud", "micronaut-oraclecloud-function", "implementation", null)
    @dependency.template("com.fnproject.fn", "api", "implementation", null)
    @dependency.template("com.fnproject.fn", "runtime", "runtimeOnly", null)
    @dependency.template("com.fnproject.fn", "testing-junit4", "testImplementation", null)
    }
}
@if (features.contains("google-cloud-function")) {
    @if (!features.contains("google-cloud-function-http")) {
    @dependency.template("com.google.cloud.functions", "functions-framework-api", "compileOnly", null)
    @dependency.template("io.micronaut.gcp", "micronaut-gcp-function", "implementation", null)
    @dependency.template("com.google.cloud.functions", "functions-framework-api", "testImplementation", null)
    }
}
@if (features.contains("azure-function")) {
    @if (!features.contains("azure-function-http")) {
    @dependency.template("com.microsoft.azure.functions", "azure-functions-java-library", "implementation", null)
    @dependency.template("io.micronaut.azure", "micronaut-azure-function", "implementation", null)
    }
}
@if (features.contains("http-client")) {
    @dependency.template("io.micronaut", "micronaut-http-client", "implementation", null)
}
@if (features.contains("openapi")) {
    @dependency.template("io.swagger.core.v3", "swagger-annotations", "implementation", null)
}
@if (features.contains("management")) {
    @dependency.template("io.micronaut", "micronaut-management", "implementation", null)
}
@if (features.contains("multi-tenancy")) {
    @dependency.template("io.micronaut", "micronaut-multitenancy", "implementation", null)
}
@if (features.contains("multi-tenancy-gorm")) {
    @dependency.template("io.micronaut.groovy", "micronaut-multitenancy-gorm", "implementation", null)
}
@if (features.contains("discovery-consul") || features.contains("discovery-eureka")) {
    @dependency.template("io.micronaut", "micronaut-discovery-client", "implementation", null)
}
@if (features.contains("config-consul") && features.stream().noneMatch( f -> f.startsWith("discovery-"))) {
    @dependency.template("io.micronaut", "micronaut-discovery-client", "implementation", null)
}
@if (features.contains("config-kubernetes")) {
    @dependency.template("io.micronaut.kubernetes", "micronaut-kubernetes-discovery-client", "implementation", null)
}
@if (features.contains("micrometer")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-core", "implementation", null)
}
@if (features.contains("micrometer-appoptics")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-appoptics", "implementation", null)
}
@if (features.contains("micrometer-atlas")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-atlas", "implementation", null)
}
@if (features.contains("micrometer-azure-monitor")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-azure-monitor", "implementation", null)
}
@if (features.contains("micrometer-cloudwatch")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-cloudwatch", "implementation", null)
}
@if (features.contains("micrometer-datadog")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-datadog", "implementation", null)
}
@if (features.contains("micrometer-dynatrace")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-dynatrace", "implementation", null)
}
@if (features.contains("micrometer-elastic")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-elastic", "implementation", null)
}
@if (features.contains("micrometer-ganglia")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-ganglia", "implementation", null)
}
@if (features.contains("micrometer-graphite")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-graphite", "implementation", null)
}
@if (features.contains("micrometer-humio")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-humio", "implementation", null)
}
@if (features.contains("micrometer-influx")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-influx", "implementation", null)
}
@if (features.contains("micrometer-jmx")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-jmx", "implementation", null)
}
@if (features.contains("micrometer-kairos")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-kairos", "implementation", null)
}
@if (features.contains("micrometer-new-relic")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-new-relic", "implementation", null)
}
@if (features.contains("micrometer-prometheus")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-prometheus", "implementation", null)
}
@if (features.contains("micrometer-signalfx")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-signalfx", "implementation", null)
}
@if (features.contains("micrometer-stackdriver")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-stackdriver", "implementation", null)
}
@if (features.contains("micrometer-statsd")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-statsd", "implementation", null)
}
@if (features.contains("micrometer-wavefront")) {
    @dependency.template("io.micronaut.micrometer", "micronaut-micrometer-registry-wavefront", "implementation", null)
}
@if (features.contains("netflix-archaius")) {
    @dependency.template("io.micronaut.netflix", "micronaut-netflix-archaius", "implementation", null)
}
@if (features.contains("netflix-hystrix")) {
    @dependency.template("io.micronaut.netflix", "micronaut-netflix-hystrix", "implementation", null)
}
@if (features.contains("netflix-ribbon")) {
    @dependency.template("io.micronaut.netflix", "micronaut-netflix-ribbon", "implementation", null)
}
@if (features.contains("tracing-zipkin")) {
    @dependency.template("io.micronaut", "micronaut-tracing", "implementation", null)
    @dependency.template("io.opentracing.brave", "brave-opentracing", "implementation", null)
    @dependency.template("io.zipkin.brave", "brave-instrumentation-http", "runtimeOnly", null)
    @dependency.template("io.zipkin.reporter2", "zipkin-reporter", "runtimeOnly", null)
}
@if (features.contains("tracing-jaeger")) {
    @dependency.template("io.micronaut", "micronaut-tracing", "implementation", null)
    @dependency.template("io.jaegertracing", "jaeger-thrift", "runtimeOnly", null)
}
@if (features.contains("flyway")) {
    @dependency.template("io.micronaut.flyway", "micronaut-flyway", "implementation", null)
}
@if (features.contains("liquibase")) {
    @dependency.template("io.micronaut.liquibase", "micronaut-liquibase", "implementation", null)
}
@if (features.contains("jdbc-dbcp")) {
    @dependency.template("io.micronaut.sql", "micronaut-jdbc-dbcp", "implementation", null)
}
@if (features.contains("jdbc-tomcat")) {
    @dependency.template("io.micronaut.sql", "micronaut-jdbc-tomcat", "implementation", null)
}
@if (features.contains("jdbc-hikari")) {
    @dependency.template("io.micronaut.sql", "micronaut-jdbc-hikari", "implementation", null)
}
@if (features.contains("jdbc-ucp")) {
    @dependency.template("io.micronaut.sql", "micronaut-jdbc-ucp", "implementation", null)
}
@if (features.contains("data-jpa")) {
    @dependency.template("io.micronaut.data", "micronaut-data-hibernate-jpa", "implementation", null)
}
@if (features.contains("data-jdbc")) {
    @dependency.template("io.micronaut.data", "micronaut-data-jdbc", "implementation", null)
}
@if (features.contains("hibernate-validator")) {
    @dependency.template("io.micronaut.beanvalidation", "micronaut-hibernate-validator", "implementation", null)
}
@if (features.contains("hibernate-gorm")) {
    @dependency.template("io.micronaut.groovy", "micronaut-hibernate-gorm", "implementation", null)
}
@if (features.contains("hibernate-jpa")) {
    @dependency.template("io.micronaut.sql", "micronaut-hibernate-jpa", "implementation", null)
}
@if (features.contains("jooq")) {
    @dependency.template("io.micronaut.sql", "micronaut-jooq", "implementation", null)
}
@if (features.contains("mongo-reactive")) {
    @dependency.template("io.micronaut.mongodb", "micronaut-mongo-reactive", "implementation", null)
}
@if (features.contains("mongo-sync")) {
    @dependency.template("io.micronaut.mongodb", "micronaut-mongo-sync", "implementation", null)
}
@if (features.contains("mongo-gorm")) {
    @dependency.template("io.micronaut.groovy", "micronaut-mongo-gorm", "implementation", null)
}
@if (features.contains("neo4j-bolt")) {
    @dependency.template("io.micronaut.neo4j", "micronaut-neo4j-bolt", "implementation", null)
}
@if (features.contains("neo4j-gorm")) {
    @dependency.template("io.micronaut.groovy", "micronaut-neo4j-gorm", "implementation", null)
}
@if (features.contains("security")) {
    @dependency.template("io.micronaut.security", "micronaut-security", "implementation", null)
}
@if (features.contains("security-jwt")) {
    @dependency.template("io.micronaut.security", "micronaut-security-jwt", "implementation", null)
}
@if (features.contains("security-session")) {
    @dependency.template("io.micronaut.security", "micronaut-security-session", "implementation", null)
}
@if (features.contains("security-oauth2")) {
    @dependency.template("io.micronaut.security", "micronaut-security-oauth2", "implementation", null)
}
@if (features.contains("security-ldap")) {
    @dependency.template("io.micronaut.security", "micronaut-security-ldap", "implementation", null)
}
@if (features.contains("cassandra")) {
    @dependency.template("io.micronaut.cassandra", "micronaut-cassandra", "implementation", null)
}
@if (features.contains("elasticsearch")) {
    @dependency.template("io.micronaut.elasticsearch", "micronaut-elasticsearch", "implementation", null)
  @if (features.contains("graalvm")) {
    @dependency.template("org.slf4j", "log4j-over-slf4j", "runtimeOnly", "1.7.30")
    @dependency.template("org.apache.logging.log4j", "log4j-api", "implementation", "2.13.3")
    @dependency.template("org.apache.logging.log4j", "log4j-core", "implementation", "2.13.3")
  }
}
@if (features.contains("graphql")) {
    @dependency.template("io.micronaut.graphql", "micronaut-graphql", "implementation", null)
}
@if (features.contains("acme")) {
    implementation "io.micronaut.acme:micronaut-acme"
}
@if (features.contains("postgres-reactive")) {
    @dependency.template("io.micronaut.sql", "micronaut-postgres-reactive", "implementation", null)
}
@if (features.contains("redis-lettuce")) {
    @dependency.template("io.micronaut.redis", "micronaut-redis-lettuce", "implementation", null)
}
@if (features.contains("gcp-cloud-trace")) {
    @dependency.template("io.micronaut.gcp", "micronaut-gcp-tracing", "implementation", null)
}
@if (features.contains("gcp-pubsub")) {
    @dependency.template("io.micronaut.gcp", "micronaut-gcp-pubsub", "implementation", null)
}
@if (features.contains("kotlin-extension-functions")) {
    @dependency.template("io.micronaut.kotlin", "micronaut-kotlin-extension-functions", "implementation", null)
}
@if (features.contains("ktor")) {
    @dependency.template("io.micronaut.kotlin", "micronaut-ktor", "implementation", null)
    @dependency.template("io.ktor", "ktor-server-netty", "implementation", null)
    @dependency.template("io.ktor", "ktor-jackson", "implementation", null)
}
@if (features.contains("reactor")) {
    @dependency.template("io.micronaut.reactor", "micronaut-reactor", "implementation", null)
}
@if (features.contains("rxjava1")) {
    @dependency.template("io.micronaut.rxjava1", "micronaut-rxjava1", "implementation", null)
}
@if (features.contains("rxjava3")) {
    @dependency.template("io.micronaut.rxjava3", "micronaut-rxjava3", "implementation", null)
}
@if (features.contains("sql-jdbi")) {
    @dependency.template("io.micronaut.sql", "micronaut-jdbi", "implementation", null)
}
@if (features.contains("vertx-pg-client")) {
    @dependency.template("io.micronaut.sql", "micronaut-vertx-pg-client", "implementation", null)
}
@if (features.contains("vertx-mysql-client")) {
    @dependency.template("io.micronaut.sql", "micronaut-vertx-mysql-client", "implementation", null)
}
@if (features.contains("cache-caffeine")) {
    @dependency.template("io.micronaut.cache", "micronaut-cache-caffeine", "implementation", null)
}
@if (features.contains("cache-ehcache")) {
    @dependency.template("io.micronaut.cache", "micronaut-cache-ehcache", "implementation", null)
}
@if (features.contains("cache-hazelcast")) {
    @dependency.template("io.micronaut.cache", "micronaut-cache-hazelcast", "implementation", null)
}
@if (features.contains("cache-infinispan")) {
    @dependency.template("io.micronaut.cache", "micronaut-cache-infinispan", "implementation", null)
}
@if (features.contains("kafka")) {
    @dependency.template("io.micronaut.kafka", "micronaut-kafka", "implementation", null)
}
@if (features.contains("kafka-streams")) {
    @dependency.template("io.micronaut.kafka", "micronaut-kafka-streams", "implementation", null)
}
@if (features.contains("rabbitmq")) {
    @dependency.template("io.micronaut.rabbitmq", "micronaut-rabbitmq", "implementation", null)
}
@if (features.contains("nats")) {
    @dependency.template("io.micronaut.nats", "micronaut-nats", "implementation", null)
}
@if (applicationType == ApplicationType.FUNCTION && features.contains("aws-alexa")) {
    @dependency.template("io.micronaut.aws", "micronaut-function-aws-alexa", "implementation", null)
}
@if (applicationType == ApplicationType.DEFAULT && features.contains("aws-alexa")) {
    @dependency.template("io.micronaut.aws", "micronaut-aws-alexa-httpserver", "implementation", null)
}
@if (applicationType == ApplicationType.FUNCTION && features.contains("aws-lambda")) {
    @dependency.template("io.micronaut.aws", "micronaut-function-aws", "implementation", null)
}
@if (features.contains("aws-lambda-custom-runtime")) {
    @dependency.template("io.micronaut.aws", "micronaut-function-aws-custom-runtime", "implementation", null)
}
@if (features.contains("views-thymeleaf")) {
    @dependency.template("io.micronaut.views", "micronaut-views-thymeleaf", "implementation", null)
}
@if (features.contains("views-handlebars")) {
    @dependency.template("io.micronaut.views", "micronaut-views-handlebars", "implementation", null)
}
@if (features.contains("views-velocity")) {
    @dependency.template("io.micronaut.views", "micronaut-views-velocity", "implementation", null)
}
@if (features.contains("views-freemarker")) {
    @dependency.template("io.micronaut.views", "micronaut-views-freemarker", "implementation", null)
}
@if (features.contains("views-rocker")) {
    @dependency.template("io.micronaut.views", "micronaut-views-rocker", "implementation", null)
}
@if (features.contains("views-soy")) {
    @dependency.template("io.micronaut.views", "micronaut-views-soy", "implementation", null)
}
@if (features.contains("rss")) {
    @dependency.template("io.micronaut.rss", "micronaut-rss", "implementation", null)
}
@if (features.contains("rss-itunes-podcast")) {
    @dependency.template("io.micronaut.rss", "micronaut-itunespodcast", "implementation", null)
}
@if (features.contains("jackson-xml")) {
    @dependency.template("io.micronaut.xml", "micronaut-jackson-xml", "implementation", null)
}
@if (features.contains("jax-rs")) {
    @dependency.template("io.micronaut.jaxrs", "micronaut-jaxrs-server", "implementation", null)
}
@if (features.contains("jmx")) {
    @dependency.template("io.micronaut.jmx", "micronaut-jmx", "implementation", null)
}
@if (features.contains("dekorate-kubernetes")) {
    @dependency.template("io.dekorate", "kubernetes-annotations", "implementation", "${dekorateVersion}")
}
@if (features.contains("dekorate-openshift")) {
    @dependency.template("io.dekorate", "openshift-annotations", "implementation", "${dekorateVersion}")
}
@if (features.contains("dekorate-knative")) {
    @dependency.template("io.dekorate", "knative-annotations", "implementation", "${dekorateVersion}")
}
@if (features.contains("dekorate-prometheus")) {
    @dependency.template("io.dekorate", "prometheus-annotations", "implementation", "${dekorateVersion}")
}
@if (features.contains("dekorate-jaeger")) {
    @dependency.template("io.dekorate", "jaeger-annotations", "implementation", "${dekorateVersion}")
}
@if (features.contains("dekorate-servicecatalog")) {
    @dependency.template("io.dekorate", "servicecatalog-annotations", "implementation", "${dekorateVersion}")
}
@if (features.contains("dekorate-halkyon")) {
    @dependency.template("io.dekorate", "halkyon-annotations", "implementation", "${dekorateVersion}")
}
@if (features.contains("spring")) {
    @dependency.template("org.springframework.boot", "spring-boot-starter", "implementation", null)
}
@if (features.contains("spring-web")) {
    @dependency.template("org.springframework.boot", "spring-boot-starter-web", "implementation", null)
    @dependency.template("io.micronaut", "micronaut-http-server", "implementation", null)
    @dependency.template("io.micronaut.spring", "micronaut-spring-web", "runtime", null)
}
@if (features.contains("spring-boot")) {
    @if (!features.contains("spring-web")) {
    @dependency.template("org.springframework.boot", "spring-boot-starter-web", "implementation", null)
    }
    @dependency.template("io.micronaut.spring", "micronaut-spring-boot", "runtime", null)
}
@if (features.contains("spring-data-jpa")) {
    @dependency.template("io.micronaut.data", "micronaut-data-spring", "implementation", null)
    @dependency.template("io.micronaut.data", "micronaut-data-spring-jpa", "implementation", null)
    @dependency.template("org.springframework", "spring-orm", "implementation", null)
}
@if (features.contains("spring-data-jdbc")) {
    @dependency.template("io.micronaut.data", "micronaut-data-spring", "implementation", null)
    @dependency.template("org.springframework", "spring-jdbc", "implementation", null)
}
@if (features.contains("log4j2")) {
    @dependency.template("org.apache.logging.log4j", "log4j-core", "implementation", "2.12.1")
    @dependency.template("org.apache.logging.log4j", "log4j-api", "runtimeOnly", "2.12.1")
    @dependency.template("org.apache.logging.log4j", "log4j-slf4j-impl", "runtimeOnly", "2.12.1")
}
@if (features.contains("logback")) {
    @dependency.template("ch.qos.logback", "logback-classic", "runtimeOnly", null)
}
@if (features.contains("slf4j-simple")) {
    @dependency.template("org.slf4j", "slf4j-simple", "runtimeOnly", null)
}
@if (features.language().isKotlin()) {
    @dependency.template("com.fasterxml.jackson.module", "jackson-module-kotlin", "runtimeOnly", null)
}
@if (features.contains("h2")) {
    @dependency.template("com.h2database", "h2", "runtimeOnly", null)
}
@if (features.contains("postgres")) {
    @dependency.template("org.postgresql", "postgresql", "runtimeOnly", null)
}
@if (features.contains("mysql")) {
    @dependency.template("mysql", "mysql-connector-java", "runtimeOnly", null)
}
@if (features.contains("mariadb")) {
    @dependency.template("org.mariadb.jdbc", "mariadb-java-client", "runtimeOnly", null)
}
@if (features.contains("oracle")) {
    @dependency.template("com.oracle.database.jdbc", "ojdbc8", "runtimeOnly", null)
}
@if (features.contains("sqlserver")) {
    @dependency.template("com.microsoft.sqlserver", "mssql-jdbc", "runtimeOnly", null)
}
@if (features.contains("hibernate-gorm")) {
    @dependency.template("org.apache.tomcat", "tomcat-jdbc", "runtimeOnly", null)
}
@if (features.testFramework().isSpock()) {
    @if (features.contains("aws-lambda") || features.contains("aws-lambda-custom-runtime")) {
    @dependency.template("io.micronaut","micronaut-function", "testImplementation", null)
    }
}
@if (!features.contains("http-client")) {
    @dependency.template("io.micronaut", "micronaut-http-client", "testImplementation", null)
}
@if (features.contains("google-cloud-function") && features.testFramework().isSpock()) {
    @dependency.template("io.micronaut.servlet","micronaut-servlet-core", "testImplementation", null)
}
@if (features.contains("mongo-reactive") || features.contains("mongo-sync")) {
    @dependency.template("de.flapdoodle.embed", "de.flapdoodle.embed.mongo", "testImplementation", "2.0.1")
}
@if (features.contains("neo4j-bolt")) {
    @dependency.template("org.neo4j.test", "neo4j-harness", "testRuntimeOnly", null)
}
@if (features.contains("testcontainers")) {
    testImplementation(platform("org.testcontainers:testcontainers-bom:1.14.3"))
@if (features.contains("mysql")) {
    @dependency.template("org.testcontainers", "mysql", "testRuntimeOnly", null)
}
@if (features.contains("postgres")) {
    @dependency.template("org.testcontainers", "postgresql", "testRuntimeOnly", null)
}
@if (features.contains("mariadb")) {
    @dependency.template("org.testcontainers", "mariadb", "testRuntimeOnly", null)
}
@if (features.contains("oracle")) {
    @dependency.template("org.testcontainers", "oracle-xe", "testRuntimeOnly", null)
}
@if (features.contains("sqlserver")) {
    @dependency.template("org.testcontainers", "mssqlserver", "testRuntimeOnly", null)
}
}
}