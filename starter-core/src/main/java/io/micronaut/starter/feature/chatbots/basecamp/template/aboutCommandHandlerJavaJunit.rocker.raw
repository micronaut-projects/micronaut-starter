@import io.micronaut.starter.application.Project
@args (Project project)
@if (project.getPackageName() != null) {
package @project.getPackageName();

}

import io.micronaut.chatbots.basecamp.api.Query;
import io.micronaut.chatbots.basecamp.core.BasecampBotConfiguration;
import io.micronaut.chatbots.core.Dispatcher;
import io.micronaut.context.BeanContext;
import io.micronaut.json.JsonMapper;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
import jakarta.inject.Inject;
import org.junit.jupiter.api.Test;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertTrue;

@@MicronautTest(startApplication = false)
class BasecampAboutCommandHandlerTest {

    @@Inject
    BeanContext ctx;

    @@Inject
    Dispatcher<BasecampBotConfiguration, Query, String> dispatcher;

    @@Inject
    JsonMapper jsonMapper;

    @@Test
    void beanOfTypeHelloWorldHandlerExists() {
        assertTrue(ctx.containsBean(BasecampAboutCommandHandler.class));
    }

    @@Test
    void aboutCommandHandlerExists() throws Exception {
        String send = dispatcher.dispatch(null, jsonMapper.readValue(getAboutCommandJson(), Query.class)).get();

        assertInstanceOf(String.class, send);
        assertEquals("Basecamp Bot developed with ðŸ’™ and [Micronaut](https://micronaut.io)", send.trim());
    }

    private String getAboutCommandJson() throws IOException {
        return new String(BasecampAboutCommandHandlerTest.class.getResourceAsStream("/mockBasecampAboutCommand.json").readAllBytes());
    }
}