@import io.micronaut.starter.application.Project

@args (
Project project
)

@if (project.getPackageName() != null) {
package @project.getPackageName();
}

import com.slack.api.RequestConfigurator;
import com.slack.api.methods.MethodsClient;
import com.slack.api.methods.SlackApiException;
import com.slack.api.methods.request.chat.ChatPostMessageRequest;
import com.slack.api.methods.response.chat.ChatPostMessageResponse;
import com.slack.api.methods.response.conversations.ConversationsListResponse;
import com.slack.api.model.Conversation;
import com.slack.api.model.Message;
import org.mockito.invocation.InvocationOnMock;

import java.io.IOException;
import java.util.Arrays;
import java.util.function.Consumer;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class MethodsClientUtil {

    public static final String GENERAL_CHANNEL_ID = "C123456";

    public static MethodsClient mockClient() {
        return mockClient(m -> { });
    }

    public static MethodsClient mockClient(Consumer<Message> messageConsumer) {
        final MethodsClient client = mock(MethodsClient.class);

        try {
            when(client.conversationsList(any(RequestConfigurator.class))).thenReturn(createConversationsResponse());
            when(client.chatPostMessage(any(RequestConfigurator.class))).thenAnswer(invocation -> sendMessage(invocation, messageConsumer));
        } catch (IOException | SlackApiException e) {
            throw new RuntimeException(e);
        }

        return client;
    }

    private static ConversationsListResponse createConversationsResponse() {
        final Conversation someChannel = new Conversation();
        someChannel.setId("C654321");

        final Conversation generalChannel = new Conversation();
        generalChannel.setId(GENERAL_CHANNEL_ID);
        generalChannel.setGeneral(true);

        final ConversationsListResponse response = new ConversationsListResponse();
        response.setChannels(Arrays.asList(someChannel, generalChannel));
        return response;
    }

    private static Object sendMessage(InvocationOnMock invocation, Consumer<Message> messageConsumer) {
        RequestConfigurator<ChatPostMessageRequest.ChatPostMessageRequestBuilder> configurator = invocation.getArgument(0);
        ChatPostMessageRequest.ChatPostMessageRequestBuilder requestBuilder = ChatPostMessageRequest.builder();
        configurator.configure(requestBuilder);
        ChatPostMessageRequest request = requestBuilder.build();
        ChatPostMessageResponse chatResponse = new ChatPostMessageResponse();
        chatResponse.setChannel(request.getChannel());
        Message chatMessage = new Message();
        chatMessage.setText(request.getText());
        chatResponse.setMessage(chatMessage);

        messageConsumer.accept(chatMessage);

        return chatResponse;
    }

}