@import io.micronaut.starter.application.Project

@args (
Project project,
String handler
)

@if (project.getPackageName() != null) {
package @project.getPackageName()
}

@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent
import io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent
import io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction
}
import io.micronaut.function.aws.proxy.MockLambdaContext
import io.micronaut.http.HttpMethod
import io.micronaut.http.HttpStatus
import spock.lang.AutoCleanup
import spock.lang.Shared
import spock.lang.Specification

class HomeControllerSpec extends Specification {
@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
    @@Shared
    @@AutoCleanup
    ApiGatewayProxyRequestEventFunction handler = new ApiGatewayProxyRequestEventFunction()
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
    @@Shared
    @@AutoCleanup
    APIGatewayV2HTTPEventFunction handler = new APIGatewayV2HTTPEventFunction()
}

    void "test handler"() {
        given:
@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
        APIGatewayProxyRequestEvent request = new APIGatewayProxyRequestEvent()
        request.path = "/"
        request.httpMethod = HttpMethod.GET.toString()

} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
        APIGatewayV2HTTPEvent request = new APIGatewayV2HTTPEvent()
        request.setRequestContext(APIGatewayV2HTTPEvent.RequestContext.builder()
                .withHttp(APIGatewayV2HTTPEvent.RequestContext.Http.builder()
                        .withPath("/")
                        .withMethod(HttpMethod.GET.toString())
                        .build()
                ).build())
}
        when:
        def response = handler.handleRequest(request, new MockLambdaContext())

        then:
        HttpStatus.OK.code == response.statusCode.intValue()
        "{\"message\":\"Hello World\"}" == response.getBody()
    }

}