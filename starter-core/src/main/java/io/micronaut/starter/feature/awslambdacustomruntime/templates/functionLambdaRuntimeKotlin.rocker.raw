@import io.micronaut.starter.application.Project
@import io.micronaut.starter.feature.Features;

@args (Features features, Project project)

@if (project.getPackageName() != null) {
package @project.getPackageName()
}

import com.amazonaws.services.lambda.runtime.RequestHandler
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent
@if (features.contains("aws-lambda-scheduled-event")) {
import com.amazonaws.services.lambda.runtime.events.ScheduledEvent
} else if (features.contains("aws-lambda-s3-event-notification")) {
import com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification;
}
import io.micronaut.function.aws.runtime.AbstractMicronautLambdaRuntime
import java.net.MalformedURLException

@if (features.contains("aws-lambda-scheduled-event")) {
class FunctionLambdaRuntime : AbstractMicronautLambdaRuntime<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent, ScheduledEvent, Void?>()
} else if (features.contains("aws-lambda-s3-event-notification")) {
class FunctionLambdaRuntime : AbstractMicronautLambdaRuntime<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent, S3EventNotification, Void?>()
} else {
class FunctionLambdaRuntime : AbstractMicronautLambdaRuntime<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent, APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent>()
}
{

@if (features.contains("aws-lambda-scheduled-event")) {
    override fun createRequestHandler(vararg args: String?): RequestHandler<ScheduledEvent, Void>? {
        return FunctionRequestHandler()
    }
} else if (features.contains("aws-lambda-s3-event-notification")) {
    override fun createRequestHandler(vararg args: String?): RequestHandler<S3EventNotification, Void>? {
        return FunctionRequestHandler()
    }
} else {
    override fun createRequestHandler(vararg args: String?): RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent>? {
        return FunctionRequestHandler()
    }
}

    companion object {
        @@JvmStatic
        fun main(vararg args: String) {
            try {
                FunctionLambdaRuntime().run(*args)
            } catch (e: MalformedURLException) {
                e.printStackTrace()
            }
        }
    }
}