@import io.micronaut.starter.application.Project

@args (
Project project,
String handler
)

@if (project.getPackageName() != null) {
package @project.getPackageName()
}

@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent
import io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent
import io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction
}
import io.micronaut.function.aws.proxy.MockLambdaContext
import io.micronaut.http.HttpMethod
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe

class HomeControllerTest : StringSpec({

    "test book controller" {
@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
        val handler = ApiGatewayProxyRequestEventFunction()
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
        val handler = APIGatewayV2HTTPEventFunction()
}

@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
        val request = APIGatewayProxyRequestEvent()
        request.httpMethod = "GET"
        request.path = "/"
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
        val request = APIGatewayV2HTTPEvent()
        request.requestContext = APIGatewayV2HTTPEvent.RequestContext.builder()
            .withHttp(APIGatewayV2HTTPEvent.RequestContext.Http.builder()
                .withPath("/")
                .withMethod(HttpMethod.GET.toString())
                .build()
            ).build()
}
        val response = handler.handleRequest(request, MockLambdaContext())

        response.statusCode.shouldBe(200)
        response.body.shouldBe("{\"message\":\"Hello World\"}")
        handler.applicationContext.close()
    }
})
