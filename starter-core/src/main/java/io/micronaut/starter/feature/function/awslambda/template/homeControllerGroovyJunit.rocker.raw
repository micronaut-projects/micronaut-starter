@import io.micronaut.starter.application.Project

@args (
Project project,
String handler
)

@if (project.getPackageName() != null) {
package @project.getPackageName()
}


@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent
import io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent
import io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction
}
import io.micronaut.function.aws.proxy.MockLambdaContext
import io.micronaut.http.HttpMethod
import io.micronaut.http.HttpStatus
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Test
import static org.junit.jupiter.api.Assertions.assertEquals

class HomeControllerTest {
@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
    private static ApiGatewayProxyRequestEventFunction handler

    @@BeforeAll
    static void setupSpec() {
        handler = new ApiGatewayProxyRequestEventFunction()
    }
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
    private static APIGatewayV2HTTPEventFunction handler

    @@BeforeAll
    static void setupSpec() {
        handler = new APIGatewayV2HTTPEventFunction()
    }
}
    @@AfterAll
    static void cleanupSpec() {
        handler.getApplicationContext().close()
    }

    @@Test
    void testHandler() {
@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
        APIGatewayProxyRequestEvent request = new APIGatewayProxyRequestEvent()
        request.path = "/"
        request.httpMethod = HttpMethod.GET.toString()
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
        APIGatewayV2HTTPEvent request = new APIGatewayV2HTTPEvent()
        request.setRequestContext(APIGatewayV2HTTPEvent.RequestContext.builder()
                .withHttp(APIGatewayV2HTTPEvent.RequestContext.Http.builder()
                        .withPath("/")
                        .withMethod(HttpMethod.GET.toString())
                        .build()
                ).build())
}
        def response = handler.handleRequest(request, new MockLambdaContext())

        assertEquals(HttpStatus.OK.code, response.statusCode)
        assertEquals("{\"message\":\"Hello World\"}",  response.body)
    }
}
