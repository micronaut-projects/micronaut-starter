@import io.micronaut.starter.application.Project

@args (
Project project,
String handler
)

@if (project.getPackageName() != null) {
package @project.getPackageName();
}

@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent
import io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent
import io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction
import io.micronaut.http.HttpMethod
}
import io.micronaut.function.aws.proxy.MockLambdaContext
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test

class HomeControllerTest {

    @@Test
    fun testHandler() {
@if (handler == "io.micronaut.function.aws.proxy.payload1.ApiGatewayProxyRequestEventFunction") {
        val handler = ApiGatewayProxyRequestEventFunction()
        val request = APIGatewayProxyRequestEvent()
        request.httpMethod = "GET"
        request.path = "/"
} else if (handler == "io.micronaut.function.aws.proxy.payload2.APIGatewayV2HTTPEventFunction") {
        val handler = APIGatewayV2HTTPEventFunction()
        val request = APIGatewayV2HTTPEvent()
        request.requestContext = APIGatewayV2HTTPEvent.RequestContext.builder()
            .withHttp(APIGatewayV2HTTPEvent.RequestContext.Http.builder()
                .withPath("/")
                .withMethod(HttpMethod.GET.toString())
                .build()
            ).build()
}
        val response = handler.handleRequest(request, MockLambdaContext())

        assertEquals(200, response.statusCode)
        assertEquals("{\"message\":\"Hello World\"}", response.body)
        handler.applicationContext.close()
    }
}

