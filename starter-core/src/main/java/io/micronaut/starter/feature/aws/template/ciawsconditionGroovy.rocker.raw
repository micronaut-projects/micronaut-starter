@import io.micronaut.starter.application.Project
@args (Project project)

package @project.getPackageName()

import io.micronaut.context.condition.Condition
import io.micronaut.context.condition.ConditionContext
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File

/**
 * @@see <a href="https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/ec2-iam-roles.html">AWS Default credentials provider chain</a>
 */
class CIAwsCredentialsProviderChainCondition implements Condition {
    private static final Logger LOG = LoggerFactory.getLogger(CIAwsCredentialsProviderChainCondition)

    @@Override
    boolean matches(ConditionContext context) {
        if (System.getenv("CI")) {
            LOG.info("CI environment variable present - Condition fulfilled")
            return true
        }
        if (System.getProperty("aws.accessKeyId") && System.getProperty("aws.secretAccessKey")) {
            LOG.info("system properties aws.accessKeyId and aws.secretAccessKey present - Condition fulfilled")
            return true
        }
        if (System.getenv("AWS_ACCESS_KEY_ID") && System.getenv("AWS_SECRET_ACCESS_KEY")) {
             LOG.info("environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY present - Condition fulfilled")
            return true
        }
        if (System.getenv("AWS_CONTAINER_CREDENTIALS_RELATIVE_URI")) {
            LOG.info("AWS_CONTAINER_CREDENTIALS_RELATIVE_URI environment variable present - Condition fulfilled")
            return true
        }
        boolean result = System.getenv("HOME") && new File(System.getenv("HOME") + "/.aws/credentials").exists()
        if (result) {
            LOG.info("~/.aws/credentials file exists - Condition fulfilled")
        }
        return result;
    }
}
