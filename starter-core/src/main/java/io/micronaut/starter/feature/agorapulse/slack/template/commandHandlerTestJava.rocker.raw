@import io.micronaut.starter.application.Project

@args (
Project project
)

@if (project.getPackageName() != null) {
package @project.getPackageName();
}

import com.slack.api.app_backend.SlackSignature;
import io.micronaut.context.annotation.Property;
import io.micronaut.http.HttpRequest;
import io.micronaut.http.client.HttpClient;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
import jakarta.inject.Inject;
import org.junit.jupiter.api.Test;

import static com.slack.api.app_backend.SlackSignature.HeaderNames.X_SLACK_REQUEST_TIMESTAMP;
import static com.slack.api.app_backend.SlackSignature.HeaderNames.X_SLACK_SIGNATURE;
import static org.junit.jupiter.api.Assertions.assertEquals;

@@MicronautTest
@@Property(name = "slack.signing-secret", value = CommandHandlerTest.TEST_SIGNING_SECRET)
@@Property(name = "slack.bot-token", value = "")
class CommandHandlerTest {

    public static final String TEST_SIGNING_SECRET = "s3cr3t";

    private static final SlackSignature.Generator SIGNATURE_GENERATOR = new SlackSignature.Generator(TEST_SIGNING_SECRET);

    @@Inject
    @@Client("/")
    HttpClient client;

    @@Test
    void testCommandHandled() {
        String response = client.toBlocking().exchange(slackEventRequest("command=/@project.getName()&text=hello"), String.class).body();

        assertEquals("{\"text\":\"Got message: Hello\"}", response);
    }

    private static HttpRequest<String> slackEventRequest(String requestBody) {
        String timestamp = String.valueOf(System.currentTimeMillis() / 1000);
        String signature = SIGNATURE_GENERATOR.generate(timestamp, requestBody);

        return HttpRequest.POST("/slack/events", requestBody)
                .header(X_SLACK_REQUEST_TIMESTAMP, timestamp)
                .header(X_SLACK_SIGNATURE, signature)
                .header("Content-Type", "application/json");
    }

}