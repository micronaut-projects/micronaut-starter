@import io.micronaut.starter.options.TestFramework
@import io.micronaut.starter.application.Project
@import io.micronaut.starter.feature.Features
@import io.micronaut.starter.util.VersionInfo
@import io.micronaut.starter.feature.build.gradle.templates.dependency
@import io.micronaut.starter.application.ApplicationType

@args (
ApplicationType applicationType,
Project project,
Features features,
boolean isKotlinDsl
)

@if (features.contains("grpc") && isKotlinDsl) {
import com.google.protobuf.gradle.*
}

@gradlePlugins.template(applicationType, project, features)

version = "0.1"
group = "@project.getPackageName()"

@if (features.contains("asciidoctor")) {
@if(isKotlinDsl) {
apply(from="gradle/asciidoc.gradle")
} else {
apply from: "gradle/asciidoc.gradle"
}
}

@if(features.language().isKotlin() && isKotlinDsl) {
val kotlinVersion=project.properties.get("kotlinVersion")
}

repositories {
    mavenCentral()
    jcenter()
    @if (VersionInfo.isMicronautSnapshot()) {
    @if(isKotlinDsl) {
    maven("https://oss.jfrog.org/oss-snapshot-local")
    } else {
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
    }
    }
    @if (features.contains("oracle-function")) {
        @if (!features.contains("oracle-function-http")) {
    @if(isKotlinDsl) {
    maven("https://dl.bintray.com/fnproject/fnproject")
    } else {
    maven { url "https://dl.bintray.com/fnproject/fnproject" }
    }
        }
    }
}

micronaut {
    @if (features.contains("google-cloud-function-http")) {
    runtime("google_function")
    }
    @if (features.contains("oracle-function-http")) {
    runtime("oracle_function")
    }
    @if (features.contains("azure-function-http")) {
    runtime("azure_function")
    }
    @if (applicationType == ApplicationType.DEFAULT && features.contains("aws-lambda")) {
    runtime("lambda")
    }
    @if (features.contains("tomcat-server")) {
    runtime("tomcat")
    }
    @if (features.contains("jetty-server")) {
    runtime("jetty")
    }
    @if (features.contains("netty-server")) {
    runtime("netty")
    }
    @if (features.contains("undertow-server")) {
    runtime("undertow")
    }
    @if (features.testFramework().isJunit()) {
    testRuntime("junit5")
    } else if (features.testFramework().isKotlinTestFramework()) {
    testRuntime("kotest")
    } else if (features.testFramework().isSpock()) {
    testRuntime("spock2")
    }
    processing {
        incremental(true)
        annotations("@project.getPackageName().*")
    }
}

@dependencies.template(applicationType, project, features)


@if (features.mainClass().isPresent()) {
application {
    mainClass.set("@features.mainClass().get()")
}
} else if (features.contains("oracle-function") && !features.contains("oracle-function-http")) {
application {
    mainClass.set("com.fnproject.fn.runtime.EntryPoint")
}
}


java {
    sourceCompatibility = JavaVersion.toVersion("@features.getTargetJdk()")
@if (!features.language().isKotlin()) {
    targetCompatibility = JavaVersion.toVersion("@features.getTargetJdk()")
}
}

tasks {
@if (features.language().isKotlin()) {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "@features.getTargetJdk()"
        }
    }
}

@if (features.testFramework().isKotlinTestFramework() || features.language().isKotlin()) {
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "@features.getTargetJdk()"
        }
    }
}

@if (features.contains("jrebel")) {
    run.dependsOn(generateRebel)
}

@if (features.contains("springloaded")) {
    run {
        jvmArgs("-noverify", "-javaagent:agent/springloaded-1.2.8.RELEASE.jar")
    }
}
@if (features.contains("jrebel")) {
    run {
        if (project.hasProperty("rebelAgent")) {
            jvmArgs(rebelAgent)
        }
    }
}


@if (features.contains("azure-function")) {
    azurefunctions {
        resourceGroup = "java-functions-group"
        appName = "@project.getName()"
        pricingTier = "Consumption"
        region = "westus"
        runtime {
          os = "windows"
        }
        localDebug = "transport=dt_socket,server=y,suspend=n,address=5005"
    }
}

@if (features.contains("oracle-function")) {
@if (features.contains("oracle-function-http")) {
    dockerfileNative {
      args("-XX:MaximumHeapSizePercent=80")
    }
    nativeImage {
        args("--initialize-at-build-time=@project.getPackageName()")
    }
} else {
    nativeImage {
      args("--static",
           "-Dfn.handler=@(project.getPackageName()).Function::handleRequest",
           "--initialize-at-build-time=@project.getPackageName()")
    }

    dockerfileNative {
      args("-XX:MaximumHeapSizePercent=80")
      buildStrategy.set(io.micronaut.gradle.docker.DockerBuildStrategy.ORACLE_FUNCTION)
      defaultCommand.set("@(project.getPackageName()).Function::handleRequest")
    }

    dockerfile {
      buildStrategy.set(io.micronaut.gradle.docker.DockerBuildStrategy.ORACLE_FUNCTION)
      defaultCommand.set("@(project.getPackageName()).Function::handleRequest")
    }
}

    dockerBuild {
        @if(isKotlinDsl) {
        images.set(listOf("[REGION].ocir.io/[TENANCY]/[REPO]/$project.name:$project.version"))
        } else {
        images = ["[REGION].ocir.io/[TENANCY]/[REPO]/$project.name:$project.version"]
        }
    }

    dockerBuildNative {
        @if(isKotlinDsl) {
        images.set(listOf("[REGION].ocir.io/[TENANCY]/[REPO]/$project.name-native:$project.version"))
        } else {
        images = ["[REGION].ocir.io/[TENANCY]/[REPO]/$project.name-native:$project.version"]
        }
    }
}

    @if (features.contains("jib")) {
    jib {
        to {
            image = "gcr.io/myapp/jib-image"
        }
    }
    }
}

@if (features.contains("grpc")) {
sourceSets {
    main {
        java {
            srcDirs("build/generated/source/proto/main/grpc")
            srcDirs("build/generated/source/proto/main/java")
        }
    }
}

@if(isKotlinDsl) {
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:@VersionInfo.getBomVersion("protobuf")"
    }
    plugins {
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:@VersionInfo.getBomVersion("grpc")"
        }
    }
    generateProtoTasks {
        ofSourceSet("main").forEach {
            it.plugins {
                // Apply the "grpc" plugin whose spec is defined above, without options.
                id("grpc")
            }
        }
    }
}
} else {
protobuf {
    protoc { artifact = "com.google.protobuf:protoc:@VersionInfo.getBomVersion("protobuf")" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:@VersionInfo.getBomVersion("grpc")" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}
}
}

@if (features.contains("views-rocker")) {
sourceSets {
    main {
        rocker {
            srcDir("src/main/resources")
        }
    }
}
}
