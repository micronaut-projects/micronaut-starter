@import io.micronaut.starter.application.ApplicationType
@import io.micronaut.starter.application.Project
@import io.micronaut.starter.build.gradle.GradleBuild
@import io.micronaut.starter.build.gradle.GradleDsl
@import io.micronaut.starter.build.gradle.GradlePlugin
@import io.micronaut.starter.feature.Features
@import io.micronaut.starter.options.TestFramework
@import io.micronaut.starter.util.VersionInfo

@args (
ApplicationType applicationType,
Project project,
Features features,
GradleBuild gradleBuild
)

@for (String importLine : gradleBuild.getPluginsImports()) {
@(importLine)
}
plugins {
@for (GradlePlugin gradlePlugin : gradleBuild.getPlugins()) {
    id("@gradlePlugin.getId()") @(gradlePlugin.getVersion() != null ? "version \"" + gradlePlugin.getVersion() + "\"" : "")
}
}

version = "0.1"
group = "@project.getPackageName()"

@if(features.language().isKotlin() && gradleBuild.getDsl() == GradleDsl.KOTLIN) {
val kotlinVersion=project.properties.get("kotlinVersion")
}

repositories {
@gradleBuild.renderRepositories()
}

@dependencies.template(applicationType, project, features, gradleBuild)

@if (features.language().isJava() || features.language().isGroovy()) {
java {
    sourceCompatibility = JavaVersion.toVersion("@features.getTargetJdk()")
@if (!features.language().isKotlin()) {
    targetCompatibility = JavaVersion.toVersion("@features.getTargetJdk()")
}
}
}

@if (features.language().isKotlin() || features.testFramework().isKotlinTestFramework()) {
tasks {
@if (features.language().isKotlin()) {
    compileKotlin {
        compilerOptions {
@if(gradleBuild.getDsl() == GradleDsl.KOTLIN) {
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_@features.getTargetJdk())
} else {
           jvmTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_@features.getTargetJdk()
}
        }
    }
}

@if (features.testFramework().isKotlinTestFramework() || features.language().isKotlin()) {
    compileTestKotlin {
        compilerOptions {
@if(gradleBuild.getDsl() == GradleDsl.KOTLIN) {
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_@features.getTargetJdk())
} else {
           jvmTarget = org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_@features.getTargetJdk()
}
        }
    }
}
}
}

@gradleBuild.renderExtensions()

@gradleBuild.renderSubstitutions()
