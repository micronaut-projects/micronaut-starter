@import io.micronaut.starter.options.TestFramework
@import io.micronaut.starter.application.Project
@import io.micronaut.starter.feature.Features
@import io.micronaut.starter.util.VersionInfo
@import io.micronaut.starter.application.ApplicationType
@import io.micronaut.starter.feature.github.workflows.docker.AbstractDockerRegistryWorkflow
@import io.micronaut.starter.build.gradle.GradleBuild
@import io.micronaut.starter.build.gradle.GradleDsl
@import io.micronaut.starter.build.gradle.GradleDependency

@args (
ApplicationType applicationType,
Project project,
Features features,
GradleBuild gradleBuild
)

@if (features.contains("grpc") && gradleBuild.getDsl() == GradleDsl.KOTLIN) {
import com.google.protobuf.gradle.*
}

@gradlePlugins.template(applicationType, project, features)

version = "0.1"
group = "@project.getPackageName()"

@if (features.contains("asciidoctor")) {
@if(gradleBuild.getDsl() == GradleDsl.KOTLIN) {
apply(from="gradle/asciidoc.gradle")
} else {
apply from: "gradle/asciidoc.gradle"
}
}

@if(features.language().isKotlin() && gradleBuild.getDsl() == GradleDsl.KOTLIN) {
val kotlinVersion=project.properties.get("kotlinVersion")
}

repositories {
    mavenCentral()
    @if (VersionInfo.isMicronautSnapshot()) {
    @if(gradleBuild.getDsl() == GradleDsl.KOTLIN) {
    maven("https://s01.oss.sonatype.org/content/repositories/snapshots/")
    } else {
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
    }
    @if (features.contains("oracle-function")) {
        @if (!features.contains("oracle-function-http")) {
    @if(gradleBuild.getDsl() == GradleDsl.KOTLIN) {
    maven("https://dl.bintray.com/fnproject/fnproject")
    } else {
    maven { url "https://dl.bintray.com/fnproject/fnproject" }
    }
        }
    }
}

micronaut {
    @if (features.contains("google-cloud-function-http")) {
    runtime("google_function")
    }
    @if (features.contains("oracle-function-http")) {
    runtime("oracle_function")
    }
    @if (features.contains("azure-function-http")) {
    runtime("azure_function")
    }
    @if (applicationType == ApplicationType.DEFAULT && features.contains("aws-lambda")) {
    runtime("lambda")
    }
    @if (features.contains("tomcat-server")) {
    runtime("tomcat")
    }
    @if (features.contains("jetty-server")) {
    runtime("jetty")
    }
    @if (features.contains("netty-server")) {
    runtime("netty")
    }
    @if (features.contains("undertow-server")) {
    runtime("undertow")
    }
    @if (features.testFramework().isJunit()) {
    testRuntime("junit5")
    } else if (features.testFramework().isKotlinTestFramework()) {
    testRuntime("kotest")
    } else if (features.testFramework().isSpock()) {
    testRuntime("spock2")
    }
    processing {
        incremental(true)
        annotations("@project.getPackageName().*")
    }
}

dependencies {
@for (GradleDependency dependency : gradleBuild.getDependencies()) {
    @dependency.toSnippet()
}
@dependencies.template(applicationType, project, features)
}

@if (features.mainClass().isPresent()) {
application {
    mainClass.set("@features.mainClass().get()")
}
} else if (features.contains("oracle-function") && !features.contains("oracle-function-http")) {
application {
    mainClass.set("com.fnproject.fn.runtime.EntryPoint")
}
}

java {
    sourceCompatibility = JavaVersion.toVersion("@features.getTargetJdk()")
@if (!features.language().isKotlin()) {
    targetCompatibility = JavaVersion.toVersion("@features.getTargetJdk()")
}
}

@if (features.testFramework().isKotlinTestFramework() || features.language().isKotlin()) {
tasks @{
}
@if (features.language().isKotlin()) {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "@features.getTargetJdk()"
        }
    }
}

@if (features.testFramework().isKotlinTestFramework() || features.language().isKotlin()) {
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "@features.getTargetJdk()"
        }
    }
}

@if (features.contains("jrebel")) {
run.dependsOn(generateRebel)
}

@if (features.contains("springloaded")) {
run {
    jvmArgs("-noverify", "-javaagent:agent/springloaded-1.2.8.RELEASE.jar")
}
}
@if (features.contains("jrebel")) {
run {
    if (project.hasProperty("rebelAgent")) {
        jvmArgs(rebelAgent)
    }
}
}


@if (features.contains("azure-function")) {
azurefunctions {
    resourceGroup = "java-functions-group"
    appName = "@project.getName()"
    pricingTier = "Consumption"
    region = "westus"
    runtime {
      os = "linux"
    }
    localDebug = "transport=dt_socket,server=y,suspend=n,address=5005"
}
}

@if (features.contains("oracle-function")) {
@if (features.contains("oracle-function-http")) {
dockerfileNative {
  args("-XX:MaximumHeapSizePercent=80")
}
nativeImage {
    args("--initialize-at-build-time=@project.getPackageName()")
}
} else {
nativeImage {
    args("--static",
         "-Dfn.handler=@(project.getPackageName()).Function::handleRequest",
         "--initialize-at-build-time=@project.getPackageName()")
}

dockerfileNative {
    args("-XX:MaximumHeapSizePercent=80")
    buildStrategy.set(io.micronaut.gradle.docker.DockerBuildStrategy.ORACLE_FUNCTION)
    defaultCommand.set("@(project.getPackageName()).Function::handleRequest")
}

dockerfile {
    buildStrategy.set(io.micronaut.gradle.docker.DockerBuildStrategy.ORACLE_FUNCTION)
    defaultCommand.set("@(project.getPackageName()).Function::handleRequest")
}
}

dockerBuild {
    @if(features.getFeatures().stream().anyMatch(f -> f instanceof AbstractDockerRegistryWorkflow)) {
    images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    } else {
        @if(gradleBuild.getDsl() == GradleDsl.KOTLIN) {
    images.set(listOf("[REGION].ocir.io/[TENANCY]/[REPO]/$project.name:$project.version"))
        } else {
    images = ["[REGION].ocir.io/[TENANCY]/[REPO]/$project.name:$project.version"]
        }
    }
}

dockerBuildNative {
    @if(features.getFeatures().stream().anyMatch(f -> f instanceof AbstractDockerRegistryWorkflow)) {
    images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    } else {
        @if(gradleBuild.getDsl() == GradleDsl.KOTLIN) {
    images.set(listOf("[REGION].ocir.io/[TENANCY]/[REPO]/$project.name-native:$project.version"))
        } else {
    images = ["[REGION].ocir.io/[TENANCY]/[REPO]/$project.name-native:$project.version"]
        }
    }
}
} else if(features.getFeatures().stream().anyMatch(f -> f instanceof AbstractDockerRegistryWorkflow)) {
dockerBuild {
    images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
}

dockerBuildNative {
    images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
}
}


@if (features.contains("jib")) {
jib {
    to {
        image = "gcr.io/myapp/jib-image"
    }
}
}

@if (features.testFramework().isKotlinTestFramework() || features.language().isKotlin()) {
@}
}

@if (features.contains("grpc")) {
sourceSets {
    main {
        java {
            srcDirs("build/generated/source/proto/main/grpc")
            srcDirs("build/generated/source/proto/main/java")
        }
    }
}

@if(gradleBuild.getDsl() == GradleDsl.KOTLIN) {
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:@VersionInfo.getBomVersion("protobuf")"
    }
    plugins {
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:@VersionInfo.getBomVersion("grpc")"
        }
    }
    generateProtoTasks {
        ofSourceSet("main").forEach {
            it.plugins {
                // Apply the "grpc" plugin whose spec is defined above, without options.
                id("grpc")
            }
        }
    }
}
} else {
protobuf {
    protoc { artifact = "com.google.protobuf:protoc:@VersionInfo.getBomVersion("protobuf")" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:@VersionInfo.getBomVersion("grpc")" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}
}
}

@if (features.contains("views-rocker")) {
sourceSets {
    main {
        rocker {
            srcDir("src/main/resources")
        }
    }
}
}
