plugins {
    id "io.micronaut.starter.rocker"
}

sourceSets {
    test {
        rocker {
            srcDir("src/test/groovy")
        }
    }
}

dependencies {
    testImplementation project(":test-utils")
    testImplementation project(":starter-core")
    testImplementation project(":micronaut-cli")
    testImplementation "ch.qos.logback:logback-classic:1.2.3"
    testImplementation "com.oracle.oci.sdk:oci-java-sdk-full:1.32.2"
    testImplementation 'com.google.apis:google-api-services-run:v1-rev20201113-1.31.0'
    testImplementation 'com.google.auth:google-auth-library-oauth2-http:0.22.2'
    testImplementation 'com.azure:azure-identity:1.2.3'
    testImplementation 'com.azure:azure-core-http-netty:1.7.0'
    testImplementation 'com.azure.resourcemanager:azure-resourcemanager-containerinstance:2.1.0'
}

tasks.withType(Test) {
    forkEvery = 10
}

rocker {
    // (All settings are shown with their defaults)
    //
    // Skips building templates all together
    skip false
    // Base directory for generated java sources, actual target is sub directory
    // with the name of the source set. The value is passed through project.file().
    outputBaseDirectory = "$buildDir/generated-src/rocker"
    // Base directory for the directory where the hot reload feature
    // will (re)compile classes to at runtime (and where `rocker-compiler.conf`
    // is generated, which is used by RockerRuntime.getInstance().setReloading(true)).
    // The actual target is a sub directory with the name of the source set.
    // The value is passed through project.file().
    classBaseDirectory = "$buildDir/classes"
    failOnError true
    skipTouch true
    // must not be empty when skipTouch is equal to false
    touchFile ""
    javaVersion '1.8'
    extendsClass null
    extendsModelClass null
    optimize true
    discardLogicWhitespace = true
    targetCharset null
    suffixRegex null
    postProcessing = ['io.micronaut.starter.rocker.WhitespaceProcessor']
    markAsGenerated null
}