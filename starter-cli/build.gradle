plugins {
    id "application"
    id "com.github.johnrengelman.shadow"
    id "io.micronaut.starter.rocker"
    id 'org.asciidoctor.convert' version '1.6.1' apply false
    id "io.sdkman.vendors" version "1.2.1"
}

ext {
    picocliVersion = '4.2.0'
}

configurations {
    generateConfig
}

configurations.all {
    resolutionStrategy {
        // prevent fatJar result containing multiple versions of picocli
        force("info.picocli:picocli:$picocliVersion")
    }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-graal")
    api project(":starter-core")
    api "info.picocli:picocli:${picocliVersion}"
    api "info.picocli:picocli-shell-jline3:${picocliVersion}"
    api "com.fizzed:rocker-runtime:1.2.3"

    runtime "org.slf4j:slf4j-nop:1.7.30"

    compileOnly "org.graalvm.nativeimage:svm"

    implementation "org.fusesource.jansi:jansi:1.15"
    implementation "org.yaml:snakeyaml:1.26"

    generateConfig "info.picocli:picocli-codegen:${picocliVersion}"
}

mainClassName = "io.micronaut.starter.cli.MicronautStarter"

sourceSets {
    main {
        rocker {
            srcDir("src/main/java")
        }
    }
}

rocker {
    // (All settings are shown with their defaults)
    //
    // Skips building templates all together
    skip false
    // Base directory for generated java sources, actual target is sub directory
    // with the name of the source set. The value is passed through project.file().
    outputBaseDirectory = "$buildDir/generated-src/rocker"
    // Base directory for the directory where the hot reload feature
    // will (re)compile classes to at runtime (and where `rocker-compiler.conf`
    // is generated, which is used by RockerRuntime.getInstance().setReloading(true)).
    // The actual target is a sub directory with the name of the source set.
    // The value is passed through project.file().
    classBaseDirectory = "$buildDir/classes"
    failOnError true
    skipTouch true
    // must not be empty when skipTouch is equal to false
    touchFile ""
    javaVersion '1.8'
    extendsClass null
    extendsModelClass null
    optimize null
    discardLogicWhitespace = true
    targetCharset null
    suffixRegex null
    postProcessing = ['io.micronaut.starter.rocker.WhitespaceProcessor']
    markAsGenerated null
}

File outDir = new File(project.buildDir, 'bin')

task buildCompletion(type: JavaExec) {
    doFirst {
        outDir.mkdir()
    }
    main = "picocli.AutoComplete"
    jvmArgs = ["-Dpicocli.autocomplete.systemExitOnError"]
    args = [mainClassName, "--completionScript=${outDir}/mn_completion", "--force", "--factory=io.micronaut.starter.cli.MicronautFactory"]
    classpath = sourceSets.main.runtimeClasspath
}
assemble.dependsOn(['buildCompletion'])

distributions {
    main {
        contents {
            from(outDir) {
                into 'bin'
            }
            from("${project.rootProject.projectDir}/LICENSE") {
                into ''
            }
        }
    }
}

startScripts {
    applicationName = 'mn'
}

shadowJar {
    mergeServiceFiles()
}

sdkman {
    api = "https://vendors.sdkman.io"
    consumerKey = System.getenv("GVM_SDKVENDOR_KEY") ?: project.hasProperty("gvmSdkvendorKey") ? project.gvmSdkvendorKey : ''
    consumerToken = System.getenv("GVM_SDKVENDOR_TOKEN") ?: project.hasProperty("gvmSdkvendorToken") ? project.gvmSdkvendorToken : ''
    candidate = "micronaut"
    version = project.version
    url = "https://github.com/micronaut-projects/micronaut-starter/releases/download/v${project.version}/micronaut-cli-${project.version}.zip"
    hashtag = "#micronautfw"
}

task copyShadowJar(type: Copy) {
    from shadowJar.outputs
    into "${project.rootProject.buildDir}/libs"
    rename { String fileName -> "cli.jar" }
}

task exploded(type: Copy) {
    from zipTree(distZip.outputs.files.singleFile)
    into "${project.buildDir}/dist"
    eachFile { FileCopyDetails fcd ->
        fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
    }
}

assemble.dependsOn('exploded')