plugins {
    id 'io.micronaut.internal.build.starter-cli-module'
    id "io.micronaut.application"
}

ext {
    picocliVersion = '4.7.5'
}

configurations {
    generateConfig
}

configurations.all {
    resolutionStrategy {
        // prevent fatJar result containing multiple versions of picocli
        force("info.picocli:picocli:$picocliVersion")
    }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-graal")

    compileOnly("org.graalvm.nativeimage:svm")

    api(project(":starter-core"))
    api("info.picocli:picocli:$picocliVersion")
    api("info.picocli:picocli-shell-jline3:$picocliVersion")
    api("com.fizzed:rocker-runtime:$rockerVersion")

    implementation("org.slf4j:slf4j-nop:2.0.13")
    implementation("org.fusesource.jansi:jansi:1.18")
    implementation("org.yaml:snakeyaml")
    implementation("javax.inject:javax.inject:1")
    implementation("org.shredzone.acme4j:acme4j-client")
    implementation("org.shredzone.acme4j:acme4j-utils:2.16")
    implementation("org.jline:jline:3.26.0")

    testImplementation("io.micronaut.picocli:micronaut-picocli")
    testImplementation("org.testcontainers:spock")
    testImplementation("org.reflections:reflections:0.10.2")
    testImplementation("org.apache.groovy:groovy-xml")

    generateConfig("info.picocli:picocli-codegen:$picocliVersion")
}

graalvmNative {
    toolchainDetection = false

    binaries {
        main {
            // Main options
            sharedLibrary = false
            imageName = "mn"
            if (project.hasProperty("musl")) {
                logger.lifecycle("Using musl libc")
                buildArgs("--libc=musl", "--static")
            }
            mainClass = "io.micronaut.starter.cli.MicronautStarter"
        }
    }
}

application {
    mainClass = "io.micronaut.starter.cli.MicronautStarter"
}

rocker {
    javaVersion = '17'
    postProcessing = ['io.micronaut.starter.rocker.WhitespaceProcessor']
}

startScripts {
    applicationName = 'mn'
}

run {
    standardInput = System.in
}

sdkman {
    api = "https://vendors.sdkman.io"
    consumerKey = System.getenv("GVM_SDKVENDOR_KEY") ?: project.hasProperty("gvmSdkvendorKey") ? project.gvmSdkvendorKey : ''
    consumerToken = System.getenv("GVM_SDKVENDOR_TOKEN") ?: project.hasProperty("gvmSdkvendorToken") ? project.gvmSdkvendorToken : ''
    candidate = "micronaut"
    version = project.version
    hashtag = "#micronautfw"
    platforms = [
            // TODO:  Once graal native-image works for arm OSX, we should switch to building and publishing a non-rosetta release (https://github.com/oracle/graal/issues/2666)
            "MAC_ARM64":"https://github.com/micronaut-projects/micronaut-starter/releases/download/v${project.version}/mn-darwin-amd64-v${project.version}.zip",
            "MAC_OSX":"https://github.com/micronaut-projects/micronaut-starter/releases/download/v${project.version}/mn-darwin-amd64-v${project.version}.zip",
            "WINDOWS_64":"https://github.com/micronaut-projects/micronaut-starter/releases/download/v${project.version}/mn-win-amd64-v${project.version}.zip",
            "LINUX_64":"https://github.com/micronaut-projects/micronaut-starter/releases/download/v${project.version}/mn-linux-amd64-v${project.version}.zip"
    ]
}

tasks.register('sdkRelease') {
    dependsOn((projectVersion.endsWith("-SNAPSHOT") || projectVersion.contains("-M") || projectVersion.contains("-R")) ? 'sdkMinorRelease' : 'sdkMajorRelease')
}
