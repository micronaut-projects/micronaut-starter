plugins {
    id "io.micronaut.internal.starter.convention"
    id "com.gradleup.shadow"
    id "io.micronaut.crac"
    id "io.micronaut.application"
}

ext.publish = false

micronaut {
    runtime "netty"
}

dependencies {

    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")

    implementation(project(":starter-api"))
    implementation("io.micronaut.gcp:micronaut-gcp-http-client")
    implementation("io.micronaut.crac:micronaut-crac")
    implementation("io.micronaut.serde:micronaut-serde-jackson")

    runtimeOnly("ch.qos.logback:logback-classic")

    testCompileOnly("io.micronaut:micronaut-inject-groovy")

    testImplementation("io.micronaut.test:micronaut-test-spock")
    testImplementation("io.micronaut:micronaut-http-client")

    testRuntimeOnly("io.micronaut.serde:micronaut-serde-jackson")
}

application {
    mainClass = "io.micronaut.starter.netty.Application"
}
tasks.named('dockerfileNative') {
    // https://www.graalvm.org/latest/docs/getting-started/container-images/
    baseImage("ghcr.io/graalvm/jdk:ol8-java17-22.3.2")
}

tasks.named("dockerBuildNative") {
    images = [project.hasProperty("dockerImageName") ? project.getProperty("dockerImageName") : "micronaut-starter"]
}

tasks.named("dockerBuild") {
    images = [project.hasProperty("dockerImageName") ? project.getProperty("dockerImageName") : "micronaut-starter"]
}

graalvmNative {
    toolchainDetection = false

    binaries {
        main {
            // Main options
            sharedLibrary = false
            imageName = 'micronaut-starter'
            mainClass = 'io.micronaut.starter.netty.Application'
            buildArgs.add('--static --libc=musl')
        }
    }
}
