package io.micronaut.starter.springboot.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.micronaut.starter.application.Project;

/*
 * Auto generated code to render template io/micronaut/starter/springboot/template/springBootJavaApplication.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class springBootJavaApplication extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "springBootJavaApplication.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.starter.springboot.template"; }
    static public String getHeaderHash() { return "-1654727492"; }
    static public String[] getArgumentNames() { return new String[] { "project" }; }

    // argument @ [3:2]
    private Project project;

    public springBootJavaApplication project(Project project) {
        this.project = project;
        return this;
    }

    public Project project() {
        return this.project;
    }

    static public springBootJavaApplication template(Project project) {
        return new springBootJavaApplication()
            .project(project);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // package 
        static private final String PLAIN_TEXT_0_0 = "package ";
        // ;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}
        static private final String PLAIN_TEXT_1_0 = ";\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}";

        // argument @ [3:2]
        protected final Project project;

        public Template(springBootJavaApplication model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.project = model.project();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [3:24]
            __internal.aboutToExecutePosInTemplate(3, 24);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [5:9]
            __internal.aboutToExecutePosInTemplate(5, 9);
            __internal.renderValue(project.getPackageName(), false);
            // PlainText @ [5:34]
            __internal.aboutToExecutePosInTemplate(5, 34);
            __internal.writeValue(PLAIN_TEXT_1_0);
        }
    }

}
