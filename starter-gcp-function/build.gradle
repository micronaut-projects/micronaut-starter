plugins {
    id "com.github.johnrengelman.shadow"
    id "application"
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
    invoker
}

dependencies {
    implementation project(":starter-api")
    implementation "io.micronaut:micronaut-inject"

    implementation "io.micronaut.gcp:micronaut-gcp-function-http:3.2.1"
    compileOnly 'com.google.cloud.functions:functions-framework-api:1.0.1'
    developmentOnly 'com.google.cloud.functions:functions-framework-api:1.0.1'

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testCompileOnly "io.micronaut:micronaut-inject-groovy"
    testImplementation 'com.google.cloud.functions:functions-framework-api:1.0.1'
    testImplementation "io.micronaut.test:micronaut-test-spock"
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.0.0-beta2'
}
test.classpath += configurations.developmentOnly

mainClassName = "io.micronaut.gcp.function.http.HttpFunction"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'io.micronaut.gcp.function.http.HttpFunction'
    }
}

run.classpath += configurations.developmentOnly
task('runFunction', type: JavaExec, dependsOn: classes) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    args(
            '--target', 'io.micronaut.gcp.function.http.HttpFunction',
            '--classpath', (configurations.runtimeClasspath + sourceSets.main.output).asPath,
            '--port', 8081

    )
}
