plugins {
    id "io.micronaut.internal.starter.convention"
    id "com.github.johnrengelman.shadow"
    id "application"
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
    invoker
}

dependencies {
    implementation project(":starter-api")
    implementation "io.micronaut:micronaut-inject"

    implementation "io.micronaut.gcp:micronaut-gcp-function-http"
    compileOnly("com.google.cloud.functions:functions-framework-api")
    developmentOnly(platform("io.micronaut.platform:micronaut-platform:$micronautVersion"))
    developmentOnly("com.google.cloud.functions:functions-framework-api")
    runtimeOnly "ch.qos.logback:logback-classic:1.4.11"
    testCompileOnly "io.micronaut:micronaut-inject-groovy"
    testImplementation("com.google.cloud.functions:functions-framework-api")
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testRuntimeOnly("io.micronaut.serde:micronaut-serde-jackson")
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.3.0'

    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
}

tasks.named("test", Test) {
    useJUnitPlatform()
    classpath += configurations.developmentOnly
}

application {
    mainClass = "io.micronaut.gcp.function.http.HttpFunction"
}

tasks.named("shadowJar") {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'io.micronaut.gcp.function.http.HttpFunction'
    }
}

tasks.named("run") {
    classpath += configurations.developmentOnly
}
