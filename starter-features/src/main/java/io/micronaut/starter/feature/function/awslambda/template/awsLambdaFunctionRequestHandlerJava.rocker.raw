@import io.micronaut.starter.application.Project
@import io.micronaut.starter.feature.Features;

@args (Features features, Project project)

@if (project.getPackageName() != null) {
package @project.getPackageName();
}

import io.micronaut.function.aws.MicronautRequestHandler;
@if (features.contains("aws-lambda-scheduled-event")) {
import com.amazonaws.services.lambda.runtime.events.ScheduledEvent;
} else if (features.contains("aws-lambda-s3-event-notification")) {
import com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification;
} else  {
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import jakarta.inject.Inject;
import java.util.Collections;
}

@if (features.contains("aws-lambda-scheduled-event")) {
public class FunctionRequestHandler extends MicronautRequestHandler<ScheduledEvent, Void> {
    @@Override
    public Void execute(ScheduledEvent input) {
        return null;
    }
}
} else if (features.contains("aws-lambda-s3-event-notification")) {
public class FunctionRequestHandler extends MicronautRequestHandler<S3EventNotification, Void> {
    @@Override
    public Void execute(S3EventNotification input) {
        return null;
    }
}
} else {
public class FunctionRequestHandler extends MicronautRequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {
    @@Inject
    ObjectMapper objectMapper;

    @@Override
    public APIGatewayProxyResponseEvent execute(APIGatewayProxyRequestEvent input) {
        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();
        try {
            String json = objectMapper.writeValueAsString(Collections.singletonMap("message", "Hello World"));
            response.setStatusCode(200);
            response.setBody(json);
        } catch (JsonProcessingException e) {
            response.setStatusCode(500);
        }
        return response;
    }
}
}
