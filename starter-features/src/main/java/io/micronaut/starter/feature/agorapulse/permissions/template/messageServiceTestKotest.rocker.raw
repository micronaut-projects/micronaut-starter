@import io.micronaut.starter.application.Project

@args (
Project project
)

@if (project.getPackageName() != null) {
package @project.getPackageName()
}

import com.agorapulse.permissions.PermissionException
import io.kotest.assertions.throwables.shouldThrow
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe
import io.micronaut.security.authentication.Authentication
import io.micronaut.security.utils.DefaultSecurityService
import io.micronaut.security.utils.SecurityService
import io.micronaut.test.annotation.MockBean
import io.micronaut.test.extensions.kotest5.annotation.MicronautTest
import io.mockk.every
import io.mockk.mockk
import java.util.Optional

@@MicronautTest
class MessageServiceTest(private val messageService: MessageService, private val securityService: SecurityService) : StringSpec({

    "save message as valid user" {
        val message = Message("author", "message")
        messageService.save(message) shouldBe message
    }

    "save message as invalid user" {
        val message = Message("notanauthor", "message")
        shouldThrow<PermissionException> {
            messageService.save(message)
        }
    }

}) {

    @@MockBean(DefaultSecurityService::class)
    fun mockSecurityService(): SecurityService {
        val mockService: SecurityService = mockk()
        val authentication: Authentication = mockk()

        every { authentication.name } returns "author"
        every { mockService.authentication } returns Optional.of(authentication)

        return mockService;
    }

}
