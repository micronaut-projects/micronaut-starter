@import io.micronaut.starter.application.Project
@import io.micronaut.starter.feature.Features;

@args (Features features, Project project)

@if (project.getPackageName() != null) {
package @project.getPackageName()
}

import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent
@if (features.contains("aws-lambda-scheduled-event")) {
import com.amazonaws.services.lambda.runtime.events.ScheduledEvent
} else if (features.contains("aws-lambda-s3-event-notification")) {
import com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification;
}
import io.micronaut.function.aws.runtime.AbstractMicronautLambdaRuntime
import java.net.MalformedURLException;
import com.amazonaws.services.lambda.runtime.RequestHandler
import io.micronaut.core.annotation.Nullable

@if (features.contains("aws-lambda-scheduled-event")) {
class FunctionLambdaRuntime extends AbstractMicronautLambdaRuntime<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent, ScheduledEvent, Void>
} else if (features.contains("aws-lambda-s3-event-notification")) {
class FunctionLambdaRuntime extends AbstractMicronautLambdaRuntime<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent, S3EventNotification, Void>
} else {
class FunctionLambdaRuntime extends AbstractMicronautLambdaRuntime<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent, APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent>
}
{
    static void main(String[] args) {
        try {
            new FunctionLambdaRuntime().run(args)

        } catch (MalformedURLException e) {
            e.printStackTrace()
        }
    }
@if (features.contains("aws-lambda-scheduled-event")) {
    @@Override
    @@Nullable
    protected RequestHandler<ScheduledEvent, Void> createRequestHandler(String... args) {
        new FunctionRequestHandler()
    }
} else if (features.contains("aws-lambda-s3-event-notification")) {
    @@Override
    @@Nullable
    protected RequestHandler<S3EventNotification, Void> createRequestHandler(String... args) {
        new FunctionRequestHandler()
    }
} else {
    @@Override
    @@Nullable
    protected RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> createRequestHandler(String... args) {
        new FunctionRequestHandler()
    }
}

}
